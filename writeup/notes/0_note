操作系统的系统调用接口:
----------------------------------------------------------
API 与 ABI 的区别

应用程序二进制接口 ABI 是不同二进制代码片段的连接纽带。ABI 定义了二进制机器代码级别的规则，主要包括基本数据类型、通用寄存器的使用、参数的传递规则、以及堆栈的使用等等。ABI 与处理器和内存地址等硬件架构相关，是用来约束链接器 (Linker) 和汇编器 (Assembler) 的。在同一处理器下，基于不同高级语言编写的应用程序、库和操作系统，如果遵循同样的 ABI 定义，那么它们就能正确链接和执行。

应用程序编程接口 API 是不同源代码片段的连接纽带。API 定义了一个源码级（如 C 语言）函数的参数，参数的类型，函数的返回值等。因此 API 是用来约束编译器 (Compiler) 的：一个 API 是给编译器的一些指令，它规定了源代码可以做以及不可以做哪些事。API 与编程语言相关，如 libc 是基于 C 语言编写的标准库，那么基于 C 的应用程序就可以通过编译器建立与 libc 的联系，并能在运行中正确访问 libc 中的函数。
---------------------------------------------------------
操作系统对计算机硬件重要组成的抽象和虚拟化，这样会有助于应用程序开发。应用程序员只需访问统一的抽象概念（如文件、进程等），就可以使用各种复杂的计算机物理资源（处理器、内存、外设等）：

文件 (File) 是外设的一种抽象和虚拟化。特别对于存储外设而言，文件是持久存储的抽象。

地址空间 (Address Space) 是对内存的抽象和虚拟化。

进程 (Process) 是对计算机资源的抽象和虚拟化。而其中最核心的部分是对 CPU 的抽象与虚拟化。
---------------------------------------------------------
系统调用接口举例:
// user/src/bin/hello_world.rs
...
pub fn main() -> i32 {
   println!("Hello world from user mode program!");
   0
}
这个程序的功能就是显示一行字符串（重点看第4行的代码）。注意，这里的 println! 一个宏。而进一步跟踪源代码 （位于 user/src/console.rs ），可以看到 println! 会进一步展开为 write 函数：
// user/src/console.rs
...
impl Write for Stdout {
   fn write_str(&mut self, s: &str) -> fmt::Result {
      write(STDOUT, s.as_bytes());
      Ok(())
   }
}
这个write函数就是对系统调用 sys_write 的封装：

// user/src/lib.rs
...
pub fn write(fd: usize, buf: &[u8]) -> isize {
 sys_write(fd, buf)
}

// user/src/syscall.rs
...
pub fn sys_write(fd: usize, buffer: &[u8]) -> isize {
   syscall(SYSCALL_WRITE, [fd, buffer.as_ptr() as usize, buffer.len()])
}
ys_write 用户库函数封装了 sys_write 系统调用的API接口，这个系统调用API的参数和返回值的含义如下：

SYSCALL_WRITE 表示 sys_write 的系统调用号

fd 表示待写入文件的文件描述符；

buf 表示内存中缓冲区的起始地址；

len 表示内存中缓冲区的长度；

返回值：返回成功写入的长度或错误值

而 sys_write 系统调用的ABI接口描述了具体用哪些寄存器来保存参数和返回值：

// user/src/syscall.rs
...
fn syscall(id: usize, args: [usize; 3]) -> isize {
   let mut ret: isize;
   unsafe {
      asm!(
            "ecall",
            inlateout("x10") args[0] => ret,
            in("x11") args[1],
            in("x12") args[2],
            in("x17") id
      );
   }
   ret
}
这里我们看到，API中的各个参数和返回值分别被RISC-V通用寄存器 x17 （即存放系统调用号）、 x10 （存放 fd ，也保存返回值） 、 x11 （存放 buf ）和 x12 （存放 len ）保存。
---------------------------------------------------------



操作系统抽象:
---------------------------------------------------------

---------------------------------------------------------
---------------------------------------------------------
